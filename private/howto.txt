
to deploy:
meteor deploy drains-and-dungeons.meteor.com


#####################################################################

to start on another port:
meteor --port 3005
(will start mongodb on the next available port, e.g. 3006)


#####################################################################

to back up your local database cd to the application root and run:
 mongodump -h 127.0.0.1:3001 -d meteor -o private/mongodb-backup

to restore, run:
mongorestore --port 3001 private/mongodb-backup/meteor

######################################################################


To query for points near a geo location:
from the meteor project directory enter: meteor mongo
 on the mongodb command line enter something like: 

db.pits.ensureIndex({ "geometry": "2dsphere" })

 db.pits.find(
   { geometry :
       { $near :
          {
            $geometry : {
               type : "Point" ,
               coordinates : [147.276568, -42.831024] },
            $maxDistance : 10
          }
       }
    }
)

######################################################################


when creating new collections from kmz files
use http://ogre.adc4gis.com/
set the source srs to CRS:84
and the target srs to WGS84
be prepared to do a lot of masaging of html riddled data

######################################################################

to upload the database to the meteor.com server:

type:
meteor mongo --url drains-and-dungeons.meteor.com

you will get something back that looks like
mongodb://client-c13e8730:ce1ba416-82e7-3ac5-59b4-e3756c96415a@production-db-c2.meteor.io:27017/drains-and-dungeons_meteor_com

copy out the bits and make a command like:
mongorestore -u client-c13e8730 -p ce1ba416-82e7-3ac5-59b4-e3756c96415a -h production-db-c2.meteor.io:27017 -db drains-and-dungeons_meteor_com private/mongodb-backup/meteor/




######################################################################

getting the whole 'display from database' thing happening... the documentation:
http://docs.meteor.com/#/full/dataandsecurity


getting the whole 'display from database' thing happening... by example

let's say you want to show all the 'planar powers' monsters (monsters in the monster table that have their setting field set to "Planar Powers")

1) in server/publications.js make a publication:

Meteor.publish('allmonsters', function() {
  return Monsters.find({});
});

2) in lib/router.js make a subscription on the client side to the new publication:

// Global subscriptions
if (Meteor.isClient) {
  Meteor.subscribe('allmonsters');
}

3) in the /lib directory create a new file for your table (in this case: monsters.js) and include code to make a collection using the table name, and a function to return a bunch of records from it:

Monsters = new Mongo.Collection('monsters');

Monsters.planar = function() {
  return Monsters.find({setting:"Planar Powers"}).fetch();
};

4) Create a template to show your shiny new data in. Let's say: client/templates/planarmonsters.html - put this code in it to show the name field from each record:

<template name="mymonsters">
  {{#each planarmonsters}}
    {{name}}<br>
  {{/each}}
</template>

5) create a companion javascript file for your template. Say: client/templates/planarmonsters.js with something like this in it:

Router.route('/showmonsters', function () {
  this.render('mymonsters');
});

Template.mymonsters.helpers({
  planarmonsters: function() {
    return Monsters.planar();
  }
});

6) Bonus information:
The Router.route stuff is in there so you can create and link to new pages. For it to work you need to create a route in /lib/router.js ...

Router.map(function() {
  this.route('showmonsters');
});

7) and create a link on some other page like this:

<a href="{{pathFor 'showmonsters'}}">Show me them Planar Powers monsters</a>


8) go have a bex and a good lie down

####################################################################################################################

getting geo coordinates

I've given up on the whole database location thing for this year. For now, i'm feeding the app a bunch of arrays. Build as follows

open the collection in robomongo

run something like: db.getCollection('arthobart').find({},{ "geometry.coordinates": 1, _id: 0 })

*NOTE: this will only give the first 50 unless you page through the results :-(

click on the 'view results in text mode' button in the toolbar

copy and paste into sublime text

remove all the cruft using select, ctl-H (search and replace) mostly. There's one regex for getting rid of the /* 2 */ stuff which looks like: 
/\* [0-9]* \*/

another scenario you might encounter is a polygon. the regex is

], 
            \[ 
                [0-9]*\.[0-9]*, 
                -[0-9]*\.[0-9]*
            ]

replace with a ]
repeat until all done            

save into the lib/table.js file (e.g. lib/art-hobart.js) and then load onto the map in client/client.js

